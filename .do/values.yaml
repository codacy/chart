global:
  github:
    enabled: "true"
    login: "true"

  githubEnterprise:
    enabled: "true"
    login: "true"
    hostname: "github.dev.codacy.org"
    port: 443
    protocol: "https"
    disableSSL: "true"
    isPrivateMode: "true"

  gitlab:
    enabled: "true"
    login: "true"

  gitlabEnterprise:
    enabled: "true"
    login: "true"
    hostname: "gitlab.dev.codacy.org"
    protocol: "http"
    port: 80

  bitbucket:
    enabled: "true"
    login: "true"

  bitbucketEnterprise:
    enabled: "true"
    login: "true"
    hostname: "bitbucket-server.codacy.org"
    protocol: "http"
    port: 7990

  workerManager:
    workers:
      config:
        dedicatedMax: 20

  crow:
    config:
      passwordAuth:
        enable: true
        username: <--- crow-username --->
        password: <--- crow-password --->

  activitiesdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: activities # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: <--- codacy-db-port --->
  hotspotsdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: hotspots # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: <--- codacy-db-port --->
  crowdb:
    create: false
    host: <--- codacy-db-host --->
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: crow # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    service:
      port: <--- codacy-db-port --->
  listenerdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: listener # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: <--- codacy-db-port --->

  metrics:
    serviceMonitor:
      enabled: true
    grafana:
      enabled: true
      label: "grafana_dashboard"

codacy-ingress:
  create: true
  ingress:
    hostname:
      app: <codacy-app.dns.internal>
      api: <codacy-api.dns.internal>
    spa:
      serviceName: codacy-spa # this will be moved to the ingress default configs when the spa is released
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt-codacy
      external-dns.alpha.kubernetes.io/hostname: '<codacy-app.dns.internal>,<codacy-api.dns.internal>'
      external-dns.alpha.kubernetes.io/scope: public
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
    tls:
      hosts:
        - host: <codacy-app.dns.internal>
        - host: <codacy-api.dns.internal>
      secretName: codacy-ingress-tls-secret

codacy-api:
  replicaCount: 2
  service:
    type: ClusterIP


portal:
  replicaCount: 1

activities:
  replicaCount: 1
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5

remote-provider-service:
  replicaCount: 1
  metrics:
    serviceMonitor:
      enabled: true

hotspots-api:
  replicaCount: 1

hotspots-worker:
  replicaCount: 1

listener:
  replicaCount: 1
  listenerdb:
    create: false
  persistence:
    claim:
      size: 140Gi
  nfsserverprovisioner:
    enabled: true
    persistence:
      enabled: true
      size: 200Gi
  listenerdb: {}

engine:
  replicaCount: 1
  metrics:
    serviceMonitor:
      enabled: true

codacy-tools:
  replicaCount: 1

worker-manager:
  replicaCount: 1

fluentdoperator:
  enabled: true
  expirationDays: 15

crow:
  replicaCount: 1
  config:
    play:
      http:
        context: "/monitoring"

rabbitmq-ha:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    prometheusRule:
      enabled: true
      rules:
        - alert: Rabbitmq Unavailable
          expr: |
            kube_statefulset_status_replicas_ready{statefulset="{{ template "rabbitmq.fullname" . }}",namespace="{{ .Release.Namespace }}"} < kube_statefulset_status_replicas{statefulset="{{ template "rabbitmq.fullname" . }}",namespace="{{ .Release.Namespace }}"}
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: Insufficient Rabbitmq Nodes
            description: |
              Insufficient Rabbitmq Nodes - {{ "{{ $value }}" }}
        - alert: Rabbitmq Down
          expr: |
            kube_statefulset_status_replicas_ready{statefulset="{{ template "rabbitmq.fullname" . }}",namespace="{{ .Release.Namespace }}"} == 0
          for: 5m
          labels:
            severity: error
          annotations:
            summary: Rabbitmq Down
            description: |
              No Rabbitmq Nodes

minio:
  persistence:
    enabled: true
    size: 40Gi
