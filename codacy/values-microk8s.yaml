global:
  githubEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # port: 443
    # protocol: "https"
    # disableSSL: "false"
    # isPrivateMode: "true"

  gitlabEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # protocol: "https"
    # port: 443

  bitbucketEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # protocol: "http"
    # port: 7990
    # consumerKey: ""
    # consumerPublicKey: ""
    # consumerPrivateKey: ""
  imagePullSecrets:
    - name: docker-credentials
  codacy:
    url: "<--- codacy protocol --->://<--- codacy url --->"
    backendUrl: "<--- codacy protocol --->://<--- codacy url --->"
  akka:
    sessionSecret: "<--- akka session secret --->"
  play:
    cryptoSecret: "<--- play session secret --->"
  filestore:
    contentsSecret: "<--- filestore contents secret --->"
    uuidSecret: "<--- filestore uuid secret --->"
  cacheSecret: "<--- cache secret --->"
  defaultdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  analysisdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  resultsdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  metricsdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  filestoredb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  jobsdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
codacy-api:
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 500m
      memory: 500Mi
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
    hosts:
    - host: '<--- codacy url --->'
      paths:
        - /
portal:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 200Mi
activities:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 750Mi
    requests:
      cpu: 100m
      memory: 200Mi
  activitiesdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
remote-provider-service:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 200Mi
hotspots-api:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi
  hotspotsdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
hotspots-worker:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi
listener:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 1000Mi
    requests:
      cpu: 200m
      memory: 1000Mi
  listenerdb:
    create: false
    postgresqlUsername: <--- db username --->
    postgresqlDatabase: <--- db name --->
    postgresqlPassword: <--- db password --->
    host: <--- db url --->
    service:
      port: <--- db port --->
  persistence:
    claim:
      size: 50Gi
  nfsserverprovisioner:
    enabled: true
    persistence:
      enabled: true
      size: 100Gi
core:
  replicaCount: 1
  resources:
    limits:
      cpu: 300m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi
engine:
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 500Mi
worker-manager:
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 200Mi
  config:
    workers:
      genericMax: 2
      dedicatedMax: 2
      analysis:
        maxFileSizeBytes: 150000
        # These values are in seconds
        pluginTimeout:
          min: 300
          max: 900
    workerResources:
      limits:
        cpu: 1
        memory: "2Gi"
      requests:
        cpu: 0.5
        memory: "1Gi"
    pluginResources:
      limits:
        cpu: 1
        memory: 2000000000 # 2000Mb
      requests:
        cpu: 1
        memory: 2000000000 # 2000Mb
crow:
  replicaCount: 1
  resources:
    limits:
      cpu: 0.5
      memory: 750Mi
    requests:
      cpu: 0.1
      memory: 100Mi
postgres:
  persistence:
    enabled: true
    size: 100Gi
rabbitmq-ha:
  replicaCount: 1
  resources:
    limits:
      cpu: 0.5
      memory: 1500Mi
    requests:
      cpu: 0.2
      memory: 200Mi
fluentdoperator:
  replicaCount: 1
  enabled: true
