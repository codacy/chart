global:
  minio:
    create: true
    location: codacy-minio
    port: 9000
    accessKey: "AKIAIOSFODNN7EXAMPLE"
    secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

  s3:
    bucket:
      analysis:
        name: "analysis"
      coverage:
        name: "coverage"
      cliReports:
        name: "cli-reports"

  rabbitmq:
    create: true
    rabbitmqUsername: rabbitmq
    rabbitmqPassword: rabbitmq
    rabbitmqvHost: "/"
    host: codacy-rabbitmq-ha
    port: 5672
    ssl: false
    timeout: 15s

  defaultdb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: accounts
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  analysisdb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: analysis
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  resultsdb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: results
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  resultsdb201709:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: results201709
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  metricsdb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: metrics
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  filestoredb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: filestore
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  jobsdb:
    create: true
    imageTag: "9.6.2"
    postgresqlUsername: codacy
    postgresqlDatabase: jobs
    postgresqlPassword: codacy
    host: codacy-postgres
    service:
      port: 5432

  play:
    cryptoSecret: "PLEASE_CHANGE_ME" # Generate one with `head -c 128 /dev/urandom | base64`

  filestore:
    contentsSecret: "PLEASE_CHANGE_ME" # Generate one with `head -c 128 /dev/urandom | base64`
    uuidSecret: "PLEASE_CHANGE_ME" # Generate one with `head -c 128 /dev/urandom | base64`

  cacheSecret: "PLEASE_CHANGE_ME" # Generate one with `head -c 128 /dev/urandom | base64`

  codacy:
    url: "http://localhost:9000"
    backendUrl: "http://localhost:9000"
    api:
      url: "codacy-api"
    portal:
      url: "codacy-portal"
    hotspots:
      url: "codacy-hotspots-api"
    engine:
      url: "codacy-engine"
    listener:
      url: "codacy-listener"
    activities:
      url: "codacy-activities"
    core:
      url: "codacy-core"
    remoteProviderService:
      url: "codacy-remote-provider-service"
    workerManager:
      url: "codacy-worker-manager"

portal:
  replicaCount: 1
  fullnameOverride: codacy-portal

activities:
  replicaCount: 1
  fullnameOverride: codacy-activities
  activitiesdb:
    create: true
    host: codacy-activitiesdb
    postgresqlUsername: "codacy"
    postgresqlDatabase: "activities"
    postgresqlPassword: "PLEASE_CHANGE_ME"
    service:
      port: 5432
    fullnameOverride: codacy-activitiesdb

remote-provider-service:
  replicaCount: 1
  fullnameOverride: codacy-remote-provider-service

hotspots-api:
  replicaCount: 1
  fullnameOverride: codacy-hotspots-api
  hotspotsdb:
    create: true
    host: codacy-hotspotsdb
    postgresqlUsername: codacy
    postgresqlDatabase: hotspots
    postgresqlPassword: codacy
    service:
      port: 5432
    fullnameOverride: codacy-hotspotsdb

hotspots-worker:
  replicaCount: 1
  fullnameOverride: codacy-hotspots-worker

listener:
  replicaCount: 1
  fullnameOverride: codacy-listener
  config:
    play:
      configFile: application.enterprise.conf
      logFile: logback.xml
  
  persistence:
    claim:
      size: 100Gi

  nfsserverprovisioner:
    fullnameOverride: codacy-nfsserverprovisioner
    enabled: true
    persistence:
      enabled: true
      size: 120Gi
    # resources:
    #  limits:
    #    cpu: 2
    #    memory: 4Gi
    #  requests:
    #    cpu: 0.5
    #  memory: 1Gi

  listenerdb:
    create: true
    host: codacy-listenerdb
    postgresqlUsername: "codacy"
    postgresqlDatabase: "listener"
    postgresqlPassword: "PLEASE_CHANGE_ME"
    service:
      port: 5432
    fullnameOverride: codacy-listenerdb

core:
  replicaCount: 1
  fullnameOverride: codacy-core
  config:
    play:
      configFile: "enterprise.conf"

engine:
  replicaCount: 1
  fullnameOverride: codacy-engine
  config:
    environment: enterprise
    play:
      configFile: 'enterprise-engine.conf'
      logFile: 'logback.xml'

codacy-api:
  replicaCount: 1
  fullnameOverride: codacy-codacy-api
  config:
    play:
      configFile: "enterprise.conf"

worker-manager:
  replicaCount: 1
  fullnameOverride: codacy-worker-manager
  config:
    codacy:
      worker:
        playConfig: enterprise.conf
    cloudAmqp:
      workerUser: "rabbitmq"
      workerPass: "rabbitmq"

crow:
  replicaCount: 1
  fullnameOverride: codacy-crow
  crowdb:
    create: true
    host: codacy-crowdb
    postgresqlUsername: "codacy"
    postgresqlDatabase: "crow"
    postgresqlPassword: "PLEASE_CHANGE_ME"
    service:
      port: 5432
    fullnameOverride: codacy-crowdb

## If you set this to be enabled: true, you must clean up the fluentd job yourself
fluentdoperator:
  fullnameOverride: codacy-fluentdoperator
  enabled: false
  defaultConfigmap: codacy-fluentd-config
  bucketName: fluentd-bucket
  expirationDays: 14
  rbac:
    create: true

## YOU ARE NOT ADVISED TO CHANGE BEYOND THIS POINT
## Defaults for Internal Storage coming from requirements
## These values are ignored if 'create: false' in the global variables

rabbitmq-ha:
  fullnameOverride: codacy-rabbitmq-ha
  rabbitmqUsername: "rabbitmq"
  rabbitmqPassword: "rabbitmq"

postgres:
  fullnameOverride: codacy-postgres
  imageTag: "9.6.2"
  persistence:
    enabled: false
  #  storageClass:
  #  size: 20Gi
  #resources:
  #  requests:
  #    memory: 1024Mi
  #    cpu: 1000m
  postgresqlExtendedConf: {"sharedBuffers": "256MB", "maxConnections": "300"}
  initdbScripts:
    initdb.sql: |
      CREATE USER codacy WITH PASSWORD 'codacy';
      ALTER ROLE codacy WITH CREATEDB;
      CREATE DATABASE accounts WITH OWNER=codacy;
      CREATE DATABASE analysis WITH OWNER=codacy;
      CREATE DATABASE results WITH OWNER=codacy;
      CREATE DATABASE results201709 WITH OWNER=codacy;
      CREATE DATABASE metrics WITH OWNER=codacy;
      CREATE DATABASE filestore WITH OWNER=codacy;
      CREATE DATABASE jobs WITH OWNER=codacy;

minio:
  fullnameOverride: codacy-minio
  image:
    # We require this version in order to use lifecycle policies
    tag: RELEASE.2019-10-12T01-39-57Z
  persistence:
    size: 20Gi
  minioConfig:
    region: "eu-west-1"

ragnaros:
  fullnameOverride: codacy-ragnaros
