global:
  github: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # app:
    #   id: "1234"
    #   privateKey: ""

  githubEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # port: 443
    # protocol: "https"
    # disableSSL: "false"
    # isPrivateMode: "true"
    # app:
    #   id: "1234"
    #   privateKey: ""

  gitlabEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # protocol: "https"
    # port: 443

  bitbucketEnterprise: {}
    # if you set this provider configuration, you must save it on the admin/integrations ui.
    # enabled: "false"
    # hostname: "example.host.com"
    # protocol: "http"
    # port: 7990
    # consumerKey: ""
    # consumerPublicKey: ""
    # consumerPrivateKey: ""
  imagePullSecrets:
    - name: docker-credentials
  codacy:
    url: <--- http://codacy.example.com ---> # This value is important for VCS configuration and badges to work
    backendUrl: <--- http://codacy.example.com ---> # This value is important for VCS configuration and badges to work
  play:
    cryptoSecret: <--- generated-secret ---> # Generate one with `openssl rand -base64 128 | tr -dc 'a-zA-Z0-9'`
  akka:
    sessionSecret: <--- generated-secret ---> # Generate one with `openssl rand -base64 128 | tr -dc 'a-zA-Z0-9'`
  filestore:
    contentsSecret: <--- generated-secret ---> # Generate one with `openssl rand -base64 128 | tr -dc 'a-zA-Z0-9'`
    uuidSecret: <--- generated-secret ---> # Generate one with `openssl rand -base64 128 | tr -dc 'a-zA-Z0-9'`
  cacheSecret: <--- generated-secret ---> # Generate one with `openssl rand -base64 128 | tr -dc 'a-zA-Z0-9'`

  defaultdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: accounts # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  analysisdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: analysis # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  resultsdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: results # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  metricsdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: metrics # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  filestoredb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: filestore # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  jobsdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: jobs # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432

codacy-ingress:
  create: true
  ingress:
    hostname:
      app: <--- codacy.example.com ---> # Codacy application DNS
      api: <--- codacy.example.com ---> # Codacy API DNS
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/use-regex: "true"

codacy-api:
  replicaCount: 2
  resources:
    limits:
      cpu: 1000m
      memory: 2000Mi
    requests:
      cpu: 500m
      memory: 500Mi

portal:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 200Mi

activities:
  replicaCount: 2
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 200Mi
  activitiesdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: activities # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432

remote-provider-service:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 750Mi
    requests:
      cpu: 200m
      memory: 200Mi
hotspots-api:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 200Mi
  hotspotsdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: hotspots # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
hotspots-worker:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 200Mi

listener:
  replicaCount: 2
  resources:
    limits:
      cpu: 2
      memory: 8Gi
    requests:
      cpu: 200m
      memory: 1000Mi

  listenerdb:
    create: false
    postgresqlUsername: <--- codacy-db-username --->
    postgresqlDatabase: listener # You need to create the DB manually
    postgresqlPassword: <--- codacy-db-password --->
    host: <--- codacy-db-host --->
    service:
      port: 5432
  persistence:
    claim:
      size: 140Gi
  nfsserverprovisioner:
    enabled: true
    persistence:
      enabled: true
      size: 200Gi
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 0.5
        memory: 500Mi
core:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1500Mi
    requests:
      cpu: 100m
      memory: 200Mi
engine:
  replicaCount: 2
  resources:
    limits:
      cpu: 2000m
      memory: 15000Mi
    requests:
      cpu: 200m
      memory: 500Mi
worker-manager:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1000Mi
    requests:
      cpu: 200m
      memory: 200Mi
  config:
    workers:
      dedicatedMax: 2
      analysis:
        maxFileSizeBytes: 150000
        # These values are in seconds
        pluginTimeout:
          min: 300
          max: 900
    workerResources:
      limits:
        cpu: 1
        memory: "3Gi"
      requests:
        cpu: 0.5
        memory: "1Gi"
    pluginResources:
      limits:
        cpu: 1
        memory: 2000000000 # 2000Mb
      requests:
        cpu: 1
        memory: 2000000000 # 2000Mb
crow:
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 100Mi
rabbitmq-ha:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1200Mi
    requests:
      cpu: 0.2
      memory: 200Mi
minio:
  persistence:
    enabled: true
    size: 20Gi
