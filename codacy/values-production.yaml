global:
  defaultdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: accounts # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432
  analysisdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: analysis # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432
  resultsdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: results # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432
  metricsdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: metrics # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432
  filestoredb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: filestore # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432
  jobsdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: jobs # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432

codacy-api:
  ingress:
    enabled: true ## Enable ingress
    hosts:
      - host: <example.codacy.org>
        paths:
        - /
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      certmanager.k8s.io/acme-challenge-type: http01
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/proxy-body-size: 128m
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
    tls:
      hosts:
        - host: <example.codacy.org> # CHANGEME: Codacy application DNS
      secretName: codacy-ingress-tls-secret
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 2000Mi
    requests:
      cpu: 100m
      memory: 1000Mi

portal:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi

activities:
  replicaCount: 2
  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 3
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 5
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi
  activitiesdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: activities # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432

remote-provider-service:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 750Mi
    requests:
      cpu: 100m
      memory: 300Mi

hotspots-api:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi
  hotspotsdb:
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: hotsposts # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432

hotspots-worker:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi

listener:
  replicaCount: 2
  resources:
    limits:
      cpu: 2
      memory: 8Gi
    requests:
      cpu: 1
      memory: 6Gi

  listenerdb:
    create: false
    create: false
    postgresqlUsername: codacy
    postgresqlDatabase: listener # You need to create the DB manually
    postgresqlPassword: codacy
    host: codacy-database.internal
    service:
      port: 5432

  persistence:
    claim:
      size: 140Gi

  nfsserverprovisioner:
    enabled: true
    persistence:
      enabled: true
      size: 200Gi

core:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1500Mi
    requests:
      cpu: 100m
      memory: 750Mi

engine:
  replicaCount: 2
  resources:
    limits:
      cpu: 2000m
      memory: 15000Mi
    requests:
      cpu: 1000m
      memory: 10000Mi

worker-manager:
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 500Mi
  config:
    workers:
      genericMax: 20
      dedicatedMax: 20

crow:
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 0.5
      memory: 1Gi

fluentdoperator:
  enabled: true

minio:
  persistence:
    enabled: true
  persistence:
    size: 20Gi